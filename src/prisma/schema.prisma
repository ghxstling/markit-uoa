// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Course {
  id                     Int           @id @default(autoincrement())
  courseCode             String
  courseDescription      String
  numOfEstimatedStudents Int
  numOfEnrolledStudents  Int
  markerHours            Int
  markerResponsibilities String
  needMarkers            Boolean       @default(true)
  markersNeeded          Int
  semester               String
  modifiedAt             DateTime      @default(now()) @updatedAt
  // one to one with Application
  application            Application[]
  // TODO: add course director (name, email)
  // TODO: add course coordinator (name, email)
}

model User {
  id      Int      @id @default(autoincrement())
  email   String   @unique
  name    String?
  role    String   @default("student") // Refer to the role enum in models/role.ts
  // one to one with Student
  student Student?
}

model Student {
  id                    Int           @id @default(autoincrement())
  // one to one with User
  user                  User          @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId                Int           @unique
  preferredEmail        String
  upi                   String        @unique // ABCD123
  auid                  Int           @unique // 111222333
  overseas              Boolean       @default(false)
  overseasStatus        String?
  residencyStatus       Boolean       @default(true) //true for PR and Citizen, false for international
  validWorkVisa         Boolean?      @default(true)
  degreeType            String // Refer to the degreeType enum in models/degreeType.ts
  degreeYear            Int
  maxWorkHours          Int           @default(5) //minimum should be 5hrs
  otherContracts        Boolean       @default(false) //refers to whether the student has other marker, tutor contracts
  otherContractsDetails String?
  CV                    String? // File name of CV
  academicTranscript    String? // File name of Academic Transcript
  // one to many with Application
  applications          Application[]
}

model Application {
  id                      Int     @id @default(autoincrement())
  applicationStatus       String  @default("pending") // refer to the applicationStatus enum in models/applicationStatus.ts
  // one to one with Student
  student                 Student @relation(fields: [studentId], references: [id], onDelete: Cascade)
  studentId               Int
  // one to one with Course
  course                  Course  @relation(fields: [courseId], references: [id], onDelete: Cascade)
  courseId                Int
  hasCompletedCourse      Boolean
  previouslyAchievedGrade String? // needed if hasCompletedCourse is true
  hasTutoredCourse        Boolean
  hasMarkedCourse         Boolean
  notTakenExplanation     String? // needed if hasCompletedCourse is false
  equivalentQualification String? // needed if hasTutoredCourse && hasMarkedCourse is false

  @@unique([studentId, courseId])
}
